import PIL
import matplotlib.pyplot as plt # single use of plt is commented out
import os.path  
import PIL.ImageDraw 


def get_images(directory=None):
    """ Returns PIL.Image objects for all the images in directory.
    
    If directory is not specified, uses current directory.
    Returns a 2-tuple containing 
    a list with a  PIL.Image object for each image file in root_directory, and
    a list with a string filename for each image file in root_directory
    """
    
    if directory == None:
        directory = os.getcwd() # Use working directory if unspecified
        
    image_list = [] # Initialize aggregaotrs
    file_list = []
    
    directory_list = os.listdir(directory) # Get list of files
    for entry in directory_list:
        absolute_filename = os.path.join(directory, entry)
        try:
            image = PIL.Image.open(absolute_filename)
            file_list += [entry]
            image_list += [image]
        except IOError:
            pass # do nothing with errors tying to open non-images
    return image_list, file_list


def frame_an_image(original_image, color, wide, directory= None):
    width, height = original_image.size
     
    #result = PIL.Image.new('RGBA', (width+wide+wide, height+wide+wide), (0,0,0,0))
    result = PIL.Image.new('RGBA', original_image.size, (0,0,0,0))
    result.paste(original_image, (wide, wide))
    frame = PIL.ImageDraw.Draw(result)
    
    #mask = PIL.Image.new('RGB', (width+wide+wide, height+wide+wide), (0,0,0))
    #drawing_layer = PIL.ImageDraw.Draw(mask)
    
    #Left Frame
    frame.polygon([(0,0),(wide, 0),(wide, height),(0, height)], fill = color, outline = color)
    
    #Top Frme
    frame.polygon([(0,0),(width, 0),(width, wide),(0, wide)], fill = color, outline = color)
    
    #Bottom Frame
    frame.polygon([(0, height),(width, height),(width, height-wide),(0, height- wide)], fill = color, outline = color)
    
    #Right Frame
    frame.polygon([(width, height),(width-wide, height),(width-wide, 0),(width, 0)], fill = color, outline = color)
    
    middle = wide/2
    #up = height/15
    RepeatUp = height/wide
    RepeatAcross = width/wide
    
    triangleColor = (254,95,85)
    
    change= 0
    #triangle = frame.polygon([(width, height), (width-wide, height), (width-middle, height-wide)], fill = (255, 0 , 0), outline = (255, 0, 0))
    
    #Right Side Triangles
    for i in range(int(RepeatUp)):
        frame.polygon([(width, height - change), (width-wide, height - change), (width-middle, height-wide-change)], fill = (triangleColor), outline = (triangleColor))
        change+=wide   
    
    change= 0
    #Left Side Trianlges
    for i in range(int(RepeatUp)):
        frame.polygon([(0, height - change), (0+wide, height - change), (0+middle, height-wide-change)], fill = (triangleColor), outline = (triangleColor))
        change+=wide
    
    change = 0
    #Top Triangles
    for i in range(int(RepeatAcross)):
        frame.polygon([(0+change, wide), (wide+change, wide), (0+middle+change, 0)], fill = (triangleColor), outline = (triangleColor))
        change+=wide
    
    change = 0
    #Bottom Triangles
    for i in range(int(RepeatAcross)):
        frame.polygon([(0+change, height), (wide+change, height), (0+middle+change, height-wide)], fill = (triangleColor), outline = (triangleColor))
        change+=wide
        
    
    #result = PIL.Image.new('RGBA', original_image.size, (0,0,0,0))
    #result.paste(original_image, (0,0), mask=rounded_mask)
    return result
    
    
def frame_images( color = (238,245,219), width = 100, directory = None):
     
    if directory == None:
        directory = os.getcwd() # Use working directory if unspecified
        
    # Create a new directory 'modified'
    new_directory = os.path.join(directory, 'New Family Images')
    try:
        os.mkdir(new_directory)
    except OSError:
        pass # if the directory already exists, proceed  
        
    # Load all the images
    image_list, file_list = get_images(directory)
   
    for n in range(len(image_list)):
        # Parse the filename
        print(n)
        filename, filetype = os.path.splitext(file_list[n])
        
        curr_image = image_list[n]
        new_image = frame_an_image(curr_image, color, width) 
        new_image.getcolors()
        
        # Save the altered image, suing PNG to retain transparency
        new_image_filename = os.path.join(new_directory, filename + '.png')
        new_image.save(new_image_filename)  